# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
# vim: set filetype=python:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

option('--with-b2g-version',
       nargs=1,
       help='B2G version number',
       default='3.0')


@depends('--with-b2g-version')
def b2g_version(value):
    return value[0]


set_config('MOZ_B2G_VERSION', b2g_version)
set_define('MOZ_B2G_VERSION', b2g_version)


option('--with-b2g-os-name',
       nargs=1,
       help='B2G OS name',
       default='B2GOS')


@depends('--with-b2g-os-name')
def b2g_os_name(value):
    return value[0]


set_config('MOZ_B2G_OS_NAME', b2g_os_name)
set_define('MOZ_B2G_OS_NAME', b2g_os_name)

option('--with-target-arch-name', nargs=1, help='Target arch name for the hidl generated headers')

@depends_if('--with-target-arch-name')
def target_arch_name(value):
    return value[0]

set_config('TARGET_ARCH_NAME', target_arch_name)
set_define('TARGET_ARCH_NAME', target_arch_name)

option('--with-gonk', nargs=1, help='Path to the gonk base directory')
option('--with-gonk-gfx', nargs=0, help='Use the gonk widget layer')

@depends_if('--with-gonk')
def gonkdir(value):
    return value[0]

set_config('GONK_PATH', gonkdir)
set_define('GONK_PATH', gonkdir)

add_old_configure_assignment('gonkdir', gonkdir)

@depends_if('--with-gonk-gfx')
def gonk_toolkit(_):
    return 'cairo-gonk'

imply_option('--enable-default-toolkit', gonk_toolkit)


option('--with-gonk-toolchain-prefix', nargs=1,
       help='Prefix to gonk toolchain commands')

@depends_if('--with-gonk-toolchain-prefix')
def gonk_toolchain_prefix(value):
    return value

imply_option('--with-toolchain-prefix', gonk_toolchain_prefix)

option('--disable-remote-control-service', help='Set compile flags necessary for Remote Control Service on B2G')

@depends_if('--disable-remote-control-service')
def remote_control_service(value):
    return bool(value)

set_config('MOZ_B2G_REMOTECONTROLSERVICE', remote_control_service)
set_define('MOZ_B2G_REMOTECONTROLSERVICE', remote_control_service)

option('--target-build-variant', nargs=1, help='Target build variant type')
@depends_if('--target-build-variant')
def get_variant(value):
  if value[0] == 'user':
    return 'TARGET_VARIANT_USER'
  elif value[0] == 'userdebug':
    return 'TARGET_VARIANT_USERDEBUG'
  else:
    return 'TARGET_VARIANT_ENG'

set_config(get_variant, True)
set_define(get_variant, True)

# Presentation Support
# ==============================================================
option('--enable-presentation',
       help='Enable Presentation Service (default disable)')

@depends('--disable-presentation', target)
def presentation(value, target):
    enabled = bool(value)
    if enabled:
        return True

set_config('MOZ_PRESENTATION', presentation)
set_define('MOZ_PRESENTATION', presentation)

# SocialAPI Support
# ==============================================================
option('--enable-social',
       help='Enable Social Service (default disable)')

@depends('--disable-social', target)
def social(value, target):
    enabled = bool(value)
    if enabled:
        return True

set_config('MOZ_SOCIAL', social)
set_define('MOZ_SOCIAL', social)

# PrivateBrowsing Support
# ==============================================================
option('--disable-privatebrowsing',
       help='Disable Private Browsing (default enable)')

@depends('--enable-privatebrowsing', target)
def privatebrowsing(value, target):
    enabled = bool(value)
    if enabled:
        return True

set_config('MOZ_PRIVATEBROWSING', privatebrowsing)
set_define('MOZ_PRIVATEBROWSING', privatebrowsing)


# Gnss 1.0 Support
# ==============================================================
option('--with-gnss1.0-so', nargs=1,
       help='Assign the path of android.hardware.gnss@1.0.so')

@depends_if('--with-gnss1.0-so')
def gnss_1_0_so(value):
    return value[0]

set_config('ANDROID_GNSS_1_0_SO', gnss_1_0_so)

# Gnss 1.1 Support
# ==============================================================
option('--with-gnss1.1-so', nargs=1,
       help='Assign the path of android.hardware.gnss@1.1.so')

@depends_if('--with-gnss1.1-so')
def gnss_1_1_so(value):
    return value[0]

set_config('ANDROID_GNSS_1_1_SO', gnss_1_1_so)

# Gnss 2.0 Support
# ==============================================================
option('--with-gnss2.0-so', nargs=1,
       help='Assign the path of android.hardware.gnss@2.0.so')

@depends_if('--with-gnss2.0-so')
def gnss_2_0_so(value):
    return value[0]

set_config('ANDROID_GNSS_2_0_SO', gnss_2_0_so)

# Netd Support
# ==============================================================
option('--with-netd-aidl-so', nargs=1,
       help='Assign the path of netd_aidl_interface-V2-cpp.so')

@depends_if('--with-netd-aidl-so')
def netd_aidl_so(value):
    return value[0]

set_config('ANDROID_NETD_AIDL_SO', netd_aidl_so)

option('--with-netd-event-so', nargs=1,
       help='Assign the path of netd_event_listener_interface-V1-cpp.so')

@depends_if('--with-netd-event-so')
def netd_event_so(value):
    return value[0]

set_config('ANDROID_NETD_EVENT_SO', netd_event_so)

option('--with-dnsresolver-so', nargs=1,
       help='Assign the path of dnsresolver_aidl_interface-V2-cpp.so')

@depends_if('--with-dnsresolver-so')
def dnsresolver_so(value):
    return value[0]

set_config('ANDROID_DNSRESOLVER_SO', dnsresolver_so)

# Radio Support
# ==============================================================
option('--with-radio-so', nargs=1,
       help='Assign the path of android.hardware.radio@XX.so')

@depends_if('--with-radio-so')
def radio_so(value):
    return value[0]

set_config('ANDROID_RADIO_SO', radio_so)
 

# Vibrator Support
# ==============================================================
option('--with-vibrator-so', nargs=1,
       help='Assign the path of android.hardware.vibrator@XX.so')

@depends_if('--with-vibrator-so')
def vibrator_so(value):
    return value[0]

set_config('ANDROID_VIBRATOR_SO', vibrator_so)

# Wifi 1.0 Support
# ==============================================================
option('--with-wifi-1.0-so', nargs=1,
       help='Assign the path of android.hardware.wifi@1.0.so')

@depends_if('--with-wifi-1.0-so')
def wifi_1_0_so(value):
    return value[0]

set_config('ANDROID_WIFI_1_0_SO', wifi_1_0_so)

# Wifi 1.1 Support
# ==============================================================
option('--with-wifi-1.1-so', nargs=1,
       help='Assign the path of android.hardware.wifi@1.1.so')

@depends_if('--with-wifi-1.1-so')
def wifi_1_1_so(value):
    return value[0]

set_config('ANDROID_WIFI_1_1_SO', wifi_1_1_so)

# Wifi 1.2 Support
# ==============================================================
option('--with-wifi-1.2-so', nargs=1,
       help='Assign the path of android.hardware.wifi@1.2.so')

@depends_if('--with-wifi-1.2-so')
def wifi_1_2_so(value):
    return value[0]

set_config('ANDROID_WIFI_1_2_SO', wifi_1_2_so)

# Wifi 1.3 Support
# ==============================================================
option('--with-wifi-1.3-so', nargs=1,
       help='Assign the path of android.hardware.wifi@1.3.so')

@depends_if('--with-wifi-1.3-so')
def wifi_1_3_so(value):
    return value[0]

set_config('ANDROID_WIFI_1_3_SO', wifi_1_3_so)

# Supplicant 1.0 Support
# ==============================================================
option('--with-supplicant-1.0-so', nargs=1,
       help='Assign the path of android.hardware.wifi.supplicant@1.0.so')

@depends_if('--with-supplicant-1.0-so')
def supplicant_1_0_so(value):
    return value[0]

set_config('ANDROID_SUPPLICANT_1_0_SO', supplicant_1_0_so)

# Supplicant 1.1 Support
# ==============================================================
option('--with-supplicant-1.1-so', nargs=1,
       help='Assign the path of android.hardware.wifi.supplicant@1.1.so')

@depends_if('--with-supplicant-1.1-so')
def supplicant_1_1_so(value):
    return value[0]

set_config('ANDROID_SUPPLICANT_1_1_SO', supplicant_1_1_so)

# Supplicant 1.2 Support
# ==============================================================
option('--with-supplicant-1.2-so', nargs=1,
       help='Assign the path of android.hardware.wifi.supplicant@1.2.so')

@depends_if('--with-supplicant-1.2-so')
def supplicant_1_2_so(value):
    return value[0]

set_config('ANDROID_SUPPLICANT_1_2_SO', supplicant_1_2_so)

# Hostapd 1.0 Support
# ==============================================================
option('--with-hostapd-1.0-so', nargs=1,
       help='Assign the path of android.hardware.wifi.hostapd@1.0.so')

@depends_if('--with-hostapd-1.0-so')
def hostapd_1_0_so(value):
    return value[0]

set_config('ANDROID_HOSTAPD_1_0_SO', hostapd_1_0_so)

# Hostapd 1.1 Support
# ==============================================================
option('--with-hostapd-1.1-so', nargs=1,
       help='Assign the path of android.hardware.wifi.hostapd@1.1.so')

@depends_if('--with-hostapd-1.1-so')
def hostapd_1_1_so(value):
    return value[0]

set_config('ANDROID_HOSTAPD_1_1_SO', hostapd_1_1_so)

# Wificond Support
# ==============================================================
option('--with-wificond-so', nargs=1,
       help='Assign the path of libwificond_ipc.so')

@depends_if('--with-wificond-so')
def wificond_so(value):
    return value[0]

set_config('ANDROID_WIFICOND_SO', wificond_so)

# B2G Connectivity AIDL Binder Support
# ==============================================================
option('--with-binder-b2g-connectivity-so', nargs=1,
       help='Assign the path of binder_b2g_connectivity_interface-cpp.so')

@depends_if('--with-binder-b2g-connectivity-so')
def binder_b2g_connectivity_so(value):
    return value[0]

set_config('BINDER_B2G_CONNECTIVITY_SO', binder_b2g_connectivity_so)

include('common.configure')
